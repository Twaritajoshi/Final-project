{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7c919ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "#You have to design a Food Ordering app for a restaurant.\n",
    "#The application will have a log-in for admin and users.\n",
    "#Admin will have the following functionalities:\n",
    "\n",
    "Add new food items. Food Item will have the following details:\n",
    "FoodID //It should be generated automatically by the application.\n",
    "Name\n",
    "Quantity. For eg, 100ml, 250gm, 4pieces etc\n",
    "Price\n",
    "Discount\n",
    "Stock. Amount left in stock in the restaurant.\n",
    "Edit food items using FoodID.\n",
    "View the list of all food items.\n",
    "Remove a food item from the menu using FoodID.\n",
    "\n",
    "#The user will have the following functionalities:\n",
    "\n",
    "Register on the application. Following to be entered for registration:\n",
    "Full Name\n",
    "Phone Number\n",
    "Email\n",
    "Address\n",
    "Password\n",
    "Log in to the application\n",
    "The user will see 3 options:\n",
    "Place New Order\n",
    "Order History\n",
    "Update Profile\n",
    "Place New Order: The user can place a new order at the restaurant.\n",
    "Show list of food. The list item should as follows:\n",
    "1. Tandoori Chicken (4 pieces) [INR 240]\n",
    "2. Vegan Burger (1 Piece) [INR 320]\n",
    "3. Truffle Cake (500gm) [INR 900]\n",
    "Users should be able to select food by entering an array of numbers. For example, if the user wants to order Vegan Burger and Truffle Cake they should enter [2, 3]\n",
    "Once the items are selected user should see the list of all the items selected. The user will also get an option to place an order.\n",
    "Order History should show a list of all the previous orders\n",
    "Update Profile: the user should be able to update their profile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0e525446",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Food_items updated successfully\n",
      "Enter the food name Tandoori Chicken\n",
      "Enter food quantity in:kg,gm,pieces,ml4 pieces\n",
      "Enter food price in:Rs240\n",
      "Enter the food discount in:Rs40\n",
      "Enter food stock: kg50\n",
      "{1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}}\n",
      "items added successfully\n",
      "Enter the food nameVegan Burger\n",
      "Enter food quantity in:kg,gm,pieces,ml1 piece\n",
      "Enter food price in:Rs320\n",
      "Enter the food discount in:Rs20\n",
      "Enter food stock: kg50\n",
      "{1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}, 2: {'name': 'Vegan Burger', 'quantity': '1 piece', 'price': 320, 'discount': 20, 'stock': 50}}\n",
      "items added successfully\n",
      "Enter the food nameTruffle Cake\n",
      "Enter food quantity in:kg,gm,pieces,ml500 gm\n",
      "Enter food price in:Rs900\n",
      "Enter the food discount in:Rs50\n",
      "Enter food stock: kg50\n",
      "{1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}, 2: {'name': 'Vegan Burger', 'quantity': '1 piece', 'price': 320, 'discount': 20, 'stock': 50}, 3: {'name': 'Truffle Cake', 'quantity': '500 gm', 'price': 900, 'discount': 50, 'stock': 50}}\n",
      "items added successfully\n",
      "Enter the food_id which you want to delete1\n",
      "Remaining items are {1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}, 2: {'name': 'Vegan Burger', 'quantity': '1 piece', 'price': 320, 'discount': 20, 'stock': 50}, 3: {'name': 'Truffle Cake', 'quantity': '500 gm', 'price': 900, 'discount': 50, 'stock': 50}}\n",
      "Remaining items are {1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}, 2: {'name': 'Vegan Burger', 'quantity': '1 piece', 'price': 320, 'discount': 20, 'stock': 50}, 3: {'name': 'Truffle Cake', 'quantity': '500 gm', 'price': 900, 'discount': 50, 'stock': 50}}\n",
      "Enter the food_id which you want to uodate1\n",
      "Enter the data that you want to updateshahi paneer\n",
      "Enter the data that you want to update10 kg\n",
      "Enter the data that you want to update120 rs\n",
      "Enter the data that you want to update20\n",
      "Enter the data that you want to update50\n",
      "{1: {'name': ' Tandoori Chicken', 'quantity': '4 pieces', 'price': 240, 'discount': 40, 'stock': 50}, 2: {'name': 'Vegan Burger', 'quantity': '1 piece', 'price': 320, 'discount': 20, 'stock': 50}, 3: {'name': 'Truffle Cake', 'quantity': '500 gm', 'price': 900, 'discount': 50, 'stock': 50}}\n",
      "list of all food items\n",
      "food_id: 1 \n",
      "***********************************************\n",
      "name  Tandoori Chicken\n",
      "quantity 4 pieces\n",
      "price 240\n",
      "discount 40\n",
      "stock 50\n",
      "food_id: 2 \n",
      "***********************************************\n",
      "name Vegan Burger\n",
      "quantity 1 piece\n",
      "price 320\n",
      "discount 20\n",
      "stock 50\n",
      "food_id: 3 \n",
      "***********************************************\n",
      "name Truffle Cake\n",
      "quantity 500 gm\n",
      "price 900\n",
      "discount 50\n",
      "stock 50\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "class Restaurant:\n",
    "    def __init__(self):\n",
    "        self.food={}  #5---->1: 2: 3: 4:\n",
    "        self.food_id=len(self.food)+1\n",
    "        \n",
    "        \n",
    "        \n",
    "#Admin functionaly:\n",
    "    def food_items(self):\n",
    "        self.name=input(\"Enter the food name\")\n",
    "        self.quantity=input(\"Enter food quantity in:kg,gm,pieces,ml\")\n",
    "        self.price=int(input(\"Enter food price in:Rs\"))\n",
    "        self.discount=int(input(\"Enter the food discount in:Rs\"))\n",
    "        self.stock=int(input(\"Enter food stock: kg\"))\n",
    "        self.item={\"name\":self.name,\"quantity\":self.quantity,\"price\":self.price,\"discount\":self.discount,\"stock\":self.stock}\n",
    "        self.food_id=len(self.food)+1\n",
    "        self.food[self.food_id]=self.item\n",
    "        print(self.food)\n",
    "        with open(\"Food_items.json\",\"w\")as f:\n",
    "            json.dump(self.food,f)\n",
    "        print(\"items added successfully\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def remove_food_items(self):\n",
    "        food_id=[int(input(\"Enter the food_id which you want to delete\"))]\n",
    "        print(\"Remaining items are\",self.food)\n",
    "        with open(\"Food_items.json\",\"w\")as f:\n",
    "             json.dump(self.food,f) \n",
    "        print(\"Remaining items are\",self.food)\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def edit_food_items(self):\n",
    "        food_id=int(input(\"Enter the food_id which you want to uodate\"))\n",
    "        for i in self.food[food_id]:\n",
    "            self.food[food_id][i]\n",
    "            input(\"Enter the data that you want to update\")\n",
    "        print(self.food)\n",
    "        with open(\"food_items.json\",\"w\")as f:\n",
    "             json.dump(self.food,f)  \n",
    "    print(\"Food_items updated successfully\")\n",
    "        \n",
    "        \n",
    "    def view_food_items(self):\n",
    "        print(\"list of all food items\")\n",
    "        for i in self.food:\n",
    "            print(\"food_id:\",i,\"\\n***********************************************\")\n",
    "            for j in self.food[i]:\n",
    "                print(j,self.food[i][j])\n",
    "        \n",
    "\n",
    "        \n",
    "x=restaurant()\n",
    "x.food_items()\n",
    "x.food_items()\n",
    "x.food_items()\n",
    "x.remove_food_items()\n",
    "x.edit_food_items()\n",
    "x.view_food_items()\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43ee21fe",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 28)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:28\u001b[1;36m\u001b[0m\n\u001b[1;33m    def login(self):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "#User Functionality\n",
    "import json\n",
    "class user:\n",
    "     self.prsonal_information={}\n",
    "        def __init__(self):\n",
    "            self.details_id=len(self.details)+1\n",
    "            \n",
    "#User Functionality\n",
    "\n",
    "     def details_items(self):\n",
    "        self.name=input(\"Enter your name\")\n",
    "        self.phone_number=int(input(\"Enter your phone number\"))\n",
    "        self.Email_id=input(\"Enter your email_id\")\n",
    "        self.Password=int(input(\"Enter the password\"))\n",
    "        \n",
    "        self.item={\"name\":self.name,\"phone_number\":self.phone_number,\"email_id\":self.Email_id,\"password\":self.Password,}\n",
    "        self.details_id=len(self.details)+1\n",
    "        self.details[self.details_id]=self.item\n",
    "        print(self.details)\n",
    "        with open(\"details_items.json\",\"w\")as f:\n",
    "            json.dump(self.details,f)\n",
    "        print(\"details added successfully\")\n",
    "        \n",
    "    \n",
    "\n",
    "            \n",
    "\n",
    "    def login(self):\n",
    "         \n",
    "        while true:\n",
    "        user_id=input(\"Enter your username\")\n",
    "        password=input(\"Enter your password\")\n",
    "        if user_id==user_name/email:\n",
    "            if password==user_password:\n",
    "                print(\"you have successfully logged in\")\n",
    "                break\n",
    "                else:\n",
    "                    print(\"incorrect details please fill correct details\")\n",
    "        e       else:\n",
    "                    print(\"incorrect credentials\")\n",
    "                \n",
    "                \n",
    "    def place_order:\n",
    "        order=[]\n",
    "        show the menu(1,2,3)\n",
    "        input from the user\n",
    "        \n",
    "        if user==1:\n",
    "            order.append()\n",
    "            if user=i\n",
    "            order.append()\n",
    "            if user=2\n",
    "            oder.append()\n",
    "            if user=3\n",
    "            order.append()\n",
    "        else:\n",
    "            please give currently available order\n",
    "            \n",
    "            \n",
    "    def update_details:\n",
    "        details_id=int(input(\"Enter the details_id which you want to uodate\"))\n",
    "        for i in self.details[details_id]:\n",
    "            self.details[details_id][i]\n",
    "            input(\"Enter the data that you want to update\")\n",
    "        print(self.details)\n",
    "        with open(\"details_items.json\",\"w\")as f:\n",
    "             json.dump(self.details,f)  \n",
    "    print(\"welcome to my restaurant\")\n",
    "    while true:\n",
    "        user_input=1.Admin 2.user 3.exit\n",
    "        if user==1\n",
    "        1.additem\n",
    "        2.edit\n",
    "        3.remove\n",
    "        4.view\n",
    "        if user_input==1\n",
    "        elif==2\n",
    "        \n",
    "\n",
    "x=user()\n",
    "x.details_items()\n",
    "x.login_id()\n",
    "x.place_order()\n",
    "x.update_details()\n",
    "        \n",
    "        \n",
    "       \n",
    "        \n",
    "        \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "998356c7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b6eb715",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0e847da",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
